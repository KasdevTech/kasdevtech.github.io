<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IaC on KasdevTech</title><link>https://kasdevtech.github.io/categories/iac/</link><description>Recent content in IaC on KasdevTech</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 07 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://kasdevtech.github.io/categories/iac/index.xml" rel="self" type="application/rss+xml"/><item><title>Fixing 'az login' Authentication Failures in IaC Pipelines</title><link>https://kasdevtech.github.io/devops/authentication-failure/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>https://kasdevtech.github.io/devops/authentication-failure/</guid><description>
&lt;p&gt;You added an &lt;code&gt;az login&lt;/code&gt; command to your pipeline… and now the pipeline fails?&lt;/p&gt;
&lt;p&gt;ERROR: Please run &amp;lsquo;az login&amp;rsquo; to setup account&lt;/p&gt;
&lt;h4 id="root-cause"&gt;Root Cause&lt;/h4&gt;
&lt;p&gt;The Azure CLI needs credentials to authenticate. When run in a pipeline, &lt;code&gt;az login&lt;/code&gt; needs to be done &lt;strong&gt;non-interactively&lt;/strong&gt; using a &lt;strong&gt;service principal&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id="solution-use-service-principal-with-secrets"&gt;Solution: Use Service Principal with Secrets&lt;/h4&gt;
&lt;p&gt;Add a login step like this in your YAML:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-yaml" data-lang="yaml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;- &lt;span style="color:#f92672"&gt;script&lt;/span&gt;: |&lt;span style="color:#e6db74"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; az login --service-principal \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; --username $appId \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; --password $clientSecret \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; --tenant $tenantId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;env&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;appId&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;$(azureAppId)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;clientSecret&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;$(azureClientSecret)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#f92672"&gt;tenantId&lt;/span&gt;: &lt;span style="color:#ae81ff"&gt;$(azureTenantId)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ae81ff"&gt;Then store these as secrets in Pipeline → Library → Secure files or variable groups.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="use-azurecli2-task-instead"&gt;Use AzureCLI@2 Task Instead&lt;/h4&gt;
&lt;pre tabindex="0"&gt;&lt;code&gt;- task: AzureCLI@2
inputs:
azureSubscription: &amp;#39;MyServiceConnection&amp;#39;
scriptType: bash
scriptLocation: inlineScript
inlineScript: |
az account show
This auto-authenticates using the linked service connection.
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id="conclusion"&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Use the right login method for your IaC tools. For Terraform or Bicep, the AzureCLI@2 task is the safest, most DevOps-friendly approach.&lt;/p&gt;</description></item><item><title>Terraform Fails with State Lock Error in Azure DevOps Pipeline</title><link>https://kasdevtech.github.io/devops/terraform-withsatelock-failure/</link><pubDate>Mon, 07 Jul 2025 00:00:00 +0000</pubDate><guid>https://kasdevtech.github.io/devops/terraform-withsatelock-failure/</guid><description>
&lt;p&gt;If you&amp;rsquo;re running Terraform in Azure DevOps and see this:&lt;/p&gt;
&lt;p&gt;Error: Error acquiring the state lock: state blob is already locked&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re facing a &lt;strong&gt;Terraform state lock&lt;/strong&gt; issue — and it can block your pipeline!&lt;/p&gt;
&lt;h4 id="what-causes-it"&gt;What Causes It?&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;A previous run crashed or was canceled&lt;/li&gt;
&lt;li&gt;Two pipelines tried to modify state simultaneously&lt;/li&gt;
&lt;li&gt;State is locked but not released due to network timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="step-by-step-fix"&gt;Step-by-Step Fix&lt;/h4&gt;
&lt;h4 id="manually-unlock-state"&gt;Manually Unlock State&lt;/h4&gt;
&lt;p&gt;Use this command from your local machine (or DevOps pipeline):&lt;/p&gt;</description></item></channel></rss>